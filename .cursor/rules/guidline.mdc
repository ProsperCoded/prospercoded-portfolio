This document outlines the core context and design principles for the Fullstack Developer (Backend-focused) portfolio website. This will serve as a constant reference for all future development.

**Project Goal:** To create a highly comprehensive, project-focused portfolio showcasing detailed project briefs, technical specifications, obstacles encountered, and solutions implemented.

**Key Features:**

- **Dedicated Project Pages:** Each project will have its own statically generated page (Next.js).

- **Project Page Structure:**

  - Top: Project screenshots/visuals in a carousel.

  - Mid-section: Detailed project brief with compelling design elements.

  - Navigation: Sidebar for easy navigation between sections (e.g., Project Brief, Technical Details, Obstacles & Solutions).

- **Content Depth:** Emphasis on thorough documentation for each project, detailing the "why," "what," and "how" of development, including problem-solving narratives.

**Design & Aesthetics:**

- **Modern Practices:** Employ modern web design principles.

- **Color Theme:** Reddish-orange accents on a dark, modern background. Utilize gradients where appropriate to enhance visual appeal.

- **Corner Radius:** Containers/boxes should have slightly rounded corners, leaning towards an almost pointy aesthetic rather than fully circular.

- **Typography:** Focus on clean, readable fonts that complement the modern, dark theme.
- **Decorative Elements:** Incorporate subtle glows and code-braces ({} or []) as decorative elements throughout the design, using red/orange/pink or other theme-fitting accent colors.

**Technical Stack & Libraries:**

- **Framework:** Next.js (for static generation and React capabilities).

- **Styling:** Tailwind CSS (preferring colors defined in `tailwind.config.ts` for consistency).

- **UI Components:** Leverage component libraries like React-bits (i've attached the documentation to the library @Reactbits or search online if you need to), acerternity ui (i've also attached the docs @Aceternity UI ), and consider others like `shadcn/ui` or `Radix UI` for robust, customizable UI elements.

- **Animation:** Integrate animation libraries (e.g., `Framer Motion`, `GSAP`) for engaging transitions and interactive elements.

- **MCP:** For the frontend designs, make it outstaunishing by making use of 21st dev MCP and Magic UI MCP, to fetch components and designs to use in this project, even without me asking. when designing interface don't make it simple or dull,m make it very intreasting to use.

As you generate content, you can insert dumy data, i'll enter the accurate information later.

Most important, please implement mobile friendly implementations for everything you are doing, ensure that all designs still have a good mobile version that is pleasing

Also important this project uses pnpm, always install packages with pnpm
